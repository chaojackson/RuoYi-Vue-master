# 项目相关配置
ruoyi:
  # 名称
  name: RuoYi
  # 版本
  version: 3.8.5
  # 版权年份
  copyrightYear: 2023
  # 实例演示开关
  demoEnabled: true
  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）
  profile: D:/ruoyi/uploadPath
  # 获取ip地址开关
  addressEnabled: false
  # 验证码类型 math 数组计算 char 字符验证
  captchaType: math

# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8080
  servlet:
    # 应用的访问路径
    context-path: /
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # 连接数满后的排队数，默认为100
    accept-count: 1000
    threads:
      # tomcat最大线程数，默认为200
      max: 800
      # Tomcat启动初始化的线程数，默认值10
      min-spare: 100

# 日志配置
logging:
  level:
    com.ruoyi: debug
    org.springframework: warn

# 用户配置
user:
  password:
    # 密码最大错误次数
    maxRetryCount: 5
    # 密码锁定时间（默认10分钟）
    lockTime: 10

# Spring配置
spring:
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: i18n/messages
  profiles: 
    active: druid
  # 文件上传
  servlet:
     multipart:
       # 单个文件大小
       max-file-size:  10MB
       # 设置总上传的文件大小
       max-request-size:  20MB
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  # redis 配置
  redis:
    # 地址
    host: localhost
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms

# token配置
token:
    # 令牌自定义标识
    header: Authorization
    # 令牌密钥
    secret: abcdefghijklmnopqrstuvwxyz
    # 令牌有效期（默认30分钟）
    expireTime: 30
  
# MyBatis配置
mybatis:
    # 搜索指定包别名
    typeAliasesPackage: com.ruoyi.**.domain
    # 配置mapper的扫描，找到所有的mapper.xml映射文件
    mapperLocations: classpath*:mapper/**/*Mapper.xml
    # 加载全局的配置文件
    configLocation: classpath:mybatis/mybatis-config.xml

# PageHelper分页插件
pagehelper: 
  helperDialect: mysql
  supportMethodsArguments: true
  params: count=countSql 

# Swagger配置
swagger:
  # 是否开启swagger
  enabled: true
  # 请求前缀
  pathMapping: /dev-api

# 防止XSS攻击
xss: 
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /system/notice
  # 匹配链接
  urlPatterns: /system/*,/monitor/*,/tool/*

  ## aj-captcha 验证码配置
  # 滑动验证，底图路径，不配置将使用默认图片
  # 支持全路径
  # 支持项目路径,以classpath:开头,取resource目录下路径,例：classpath:images/jigsaw
aj:
  captcha:
    jigsaw: classpath:images/jigsaw
  #滑动验证，底图路径，不配置将使用默认图片
  ##支持全路径
  # 支持项目路径,以classpath:开头,取resource目录下路径,例：classpath:images/pic-click
    pic-click: classpath:images/pic-click
  # 对于分布式部署的应用，我们建议应用自己实现CaptchaCacheService，比如用Redis或者memcache，
  # 参考CaptchaCacheServiceRedisImpl.java
  # 如果应用是单点的，也没有使用redis，那默认使用内存。
  # 内存缓存只适合单节点部署的应用，否则验证码生产与验证在节点之间信息不同步，导致失败。
  # ！！！ 注意啦，如果应用有使用spring-boot-starter-data-redis，
  # 请打开CaptchaCacheServiceRedisImpl.java注释。
  # redis ----->  SPI： 在resources目录新建META-INF.services文件夹(两层)，参考当前服务resources。
  # 缓存local/redis...
    cache-type: local
  # local缓存的阈值,达到这个值，清除缓存
  #aj.captcha.cache-number=1000
  # local定时清除过期缓存(单位秒),设置为0代表不执行
  #aj.captcha.timing-clear=180
  #spring.redis.host=10.108.11.46
  #spring.redis.port=6379
  #spring.redis.password=
  #spring.redis.database=2
  #spring.redis.timeout=6000

  # 验证码类型default两种都实例化。
    type: default
  # 汉字统一使用Unicode,保证程序通过@value读取到是中文，可通过这个在线转换;yml格式不需要转换
  # https://tool.chinaz.com/tools/unicode.aspx 中文转Unicode
  # 右下角水印文字(我的水印)
    water-mark: \u6211\u7684\u6c34\u5370
  # 右下角水印字体(不配置时，默认使用文泉驿正黑)
  # 由于宋体等涉及到版权，我们jar中内置了开源字体【文泉驿正黑】
  # 方式一：直接配置OS层的现有的字体名称，比如：宋体
  # 方式二：自定义特定字体，请将字体放到工程resources下fonts文件夹，支持ttf\ttc\otf字体
  # aj.captcha.water-font=WenQuanZhengHei.ttf
  # 点选文字验证码的文字字体(文泉驿正黑)
  # aj.captcha.font-type=WenQuanZhengHei.ttf
  # 校验滑动拼图允许误差偏移量(默认5像素)
    slip-offset: 5
  # aes加密坐标开启或者禁用(true|false)
    aes-status: true
  # 滑动干扰项(0/1/2)
    interference-options: 2

  #点选字体样式 默认Font.BOLD
    font-style: 1
  #点选字体字体大小
    font-size: 25
  #点选文字个数,存在问题，暂不支持修改
  #aj.captcha.click-word-count=4
    history-data-clear-enable: false

  # 接口请求次数一分钟限制是否开启 true|false
    req-frequency-limit-enable: false
  # 验证失败5次，get接口锁定
    req-get-lock-limit: 5
  # 验证失败后，锁定时间间隔,s
    req-get-lock-seconds: 360
  # get接口一分钟内请求数限制
    req-get-minute-limit: 30
  # check接口一分钟内请求数限制
    req-check-minute-limit: 60
  # verify接口一分钟内请求数限制
    req-verify-minute-limit: 60
